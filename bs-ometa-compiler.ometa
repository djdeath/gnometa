let BSSemActionParser = ometa(BSJSParser) {
  jsOmetaKeyword :k = spaces '@' iName:n ?(k == n)   -> k,
  primExprHd = jsOmetaKeyword('location')     -> [#Location]
             | ^primExprHd,

  curlySemAction = "{" expr:r sc "}"          -> r
                 | "{" (srcElem:s &srcElem -> s)*:ss
                   ( expr:r sc -> [#return, r] | srcElem):s {ss.push(s)}
                   "}"                        -> [#send, #call,
                                                  [#func, [], [#begin].concat(ss)],
                                                  [#this]],
  semAction      = curlySemAction
                 | primExpr:r spaces          -> r
};

let BSOMetaParser = ometa(BaseStrParser) {
  enum :r :d     = listOf(r, d):v ("," | empty) -> v,
  space          = ^space | fromTo('//', '\n') | fromTo('/*', '*/'),
  nameFirst      = '_' | '$' | letter,
  nameRest       = nameFirst | digit,
  tsName         = <nameFirst nameRest*>,
  name           = spaces tsName,
  hexDigit       = char:x {this.hexDigits.indexOf(x.toLowerCase())}:v
                                                             ?(v >= 0) -> v,
  eChar          = <'\\' ( 'u' hexDigit hexDigit hexDigit hexDigit
                         | 'x' hexDigit hexDigit
                         | char                                   )>:s -> unescape(s)
                 | char,
  tsString       = '\'' (~'\'' eChar)*:xs '\''                         -> xs.join(''),
  characters     = '`' '`' (~('\'' '\'') eChar)*:xs '\'' '\''          -> [#App, #seq,     jsValue(#string, xs.join(''))],
  sCharacters    = '"'     (~'"'         eChar)*:xs '"'                -> [#App, #token,   jsValue(#string, xs.join(''))],
  string         = (('#' | '`') tsName | tsString):xs                  -> [#App, #exactly, jsValue(#string, xs)],
  number         = <'-'? digit+>:n                                     -> [#App, #exactly, jsValue(#number, n)],
  keyword :xs    = token(xs) ~letterOrDigit                            -> xs,
  args           = '(' listOf(#hostExpr, ','):xs ")"                   -> xs
                 | empty                                               -> [],
  application    = "^"          name:rule args:as                      -> [#App, #super, jsValue(#string, rule)].concat(as)
                 | name:grm "." name:rule args:as                      -> [#App, #foreign,
                                                                           jsCode(this.locals, [#get, grm]),
                                                                           jsValue(#string, rule)].concat(as)
                 |              name:rule args:as                      -> [#App, rule].concat(as),
  hostExpr       = BSSemActionParser.expr:r                            -> jsCode(copyObject(this.locals), r),
  curlyHostExpr  = BSSemActionParser.curlySemAction:r                  -> jsCode(copyObject(this.locals), r),
  primHostExpr   = BSSemActionParser.semAction:r                       -> jsCode(copyObject(this.locals), r),
  atomicHostExpr = curlyHostExpr | primHostExpr,
  semAction      = curlyHostExpr:x
                 | "!"  atomicHostExpr:x,
  arrSemAction   = "->" atomicHostExpr:x,
  semPred        = "?"  atomicHostExpr:x                               -> [#Pred, x],
  expr           = expr5(true):x ("|"  expr5(true))+:xs                -> [#Or,  x].concat(xs)
                 | expr5(true):x ("||" expr5(true))+:xs                -> [#XOr, x].concat(xs)
                 | expr5(false),
  expr5 :ne      = interleavePart:x ("&&" interleavePart)+:xs          -> [#Interleave, x].concat(xs)
                 | expr4(ne),
  interleavePart = "(" expr4(true):part ")"                            -> ["1", part]
                 | expr4(true):part modedIPart(part),
  modedIPart     = [#And [#Many  :part]]                               -> ["*", part]
                 | [#And [#Many1 :part]]                               -> ["+", part]
                 | [#And [#Opt   :part]]                               -> ["?", part]
                 | :part                                               -> ["1", part],
  expr4 :ne      =                expr3*:xs arrSemAction:act           -> [#And].concat(xs).concat([act])
                 | ?ne            expr3+:xs                            -> [#And].concat(xs)
                 | ?(ne == false) expr3*:xs                            -> [#And].concat(xs),
  optIter :x     = '*'                                                 -> [#Many,  x]
                 | '+'                                                 -> [#Many1, x]
                 | '?'                                                 -> [#Opt,   x]
                 | empty                                               -> x,
  optBind :x     = ':' name:n                                          -> { this.locals[n] = true; [#Set, n, x] }
                 | empty                                               -> x,
  expr3          = ":" name:n                                          -> { this.locals[n] = true; [#Set, n, [#PopArg]] }
                 | (expr2:x optIter(x) | semAction):e optBind(e)
                 | semPred,
  expr2          = "~" expr2:x                                         -> [#Not,       x]
                 | "&" expr1:x                                         -> [#Lookahead, x]
                 | expr1,
  expr1          = application
                 | ( keyword('undefined') | keyword('nil')
                   | keyword('true')      | keyword('false') ):x       -> [#App, #exactly, x]
                 | spaces (characters | sCharacters | string | number)
                 | "["  expr:x "]"                                     -> [#Form,      x]
                 | "<"  expr:x ">"                                     -> [#ConsBy,    x]
                 | "@<" expr:x ">"                                     -> [#IdxConsBy, x]
                 | "("  expr:x ")"                                     -> x,
  ruleName       = name
                 | spaces tsString,
  rule           = &(ruleName:n) !(this.locals = {})
                     rulePart(n):x ("," rulePart(n))*:xs               -> [#Rule, n, @location, [#Or, x].concat(xs)],
  rulePart :rn   = ruleName:n ?(n == rn) expr4(false):b1 ( "=" expr:b2 -> [#And, b1, b2]
                                                         | empty       -> b1
                                                         ),
  grammar        = keyword('ometa') ( "(" name:sni ")" -> sni
                                    | empty -> 'OMeta' ):sn
  "{" enum(#rule, ','):rs "}"                                             BSOMetaOptimizer.optimizeGrammar(
                                                                            [#Grammar, sn].concat(rs)
                                                                          )
};
BSOMetaParser.hexDigits = "0123456789abcdef";


let BSSemActionTranslator = ometa(BSJSTranslator) {
  Location                                 -> ['$r', this._storeVal].join(''),

  get :n                                   -> this._renameVariable(n),
  name :n                                  -> this._renameVariable(n),

  jstrans = :storeVal :toRename { this._storeVal = storeVal; this._toRename = toRename; } trans
};
BSSemActionTranslator._renameVariable = function(name) {
  if (name != '$elf' && this._toRename[name])
    return '$vars.' + name;
  return name;
};

// By dispatching on the head of a list, the following idiom allows translators to avoid doing a linear search.
// (Note that the "=" in a rule definition is optional, so you can give your rules an "ML feel".)
let BSOMetaTranslator = ometa {
  App 'super' transFn+:args                -> [this.sName, '._superApplyWithArgs(this,', args.join(','), ')']            .join(''),
  App :rule   transFn*:args
    ( ?(this._optimizedCall(rule, args))   -> ['this.', this._callables[rule].name, '(', args.join(','), ')']            .join('')
    | ?(args.length < 1)                   -> ['this._apply("', rule, '")']                                              .join('')
    |                                      -> ['this._applyWithArgs("', rule, '",', args.join(','), ')']                 .join('') ),
  Pred       transFn:expr                  -> ['this._pred(', expr, ')']                                                 .join(''),
  Or         transFn*:xs                   -> ['this._or(',  xs.join(','), ')']                                          .join(''),
  XOr        transFn*:xs                       {xs.unshift(this.rName.toProgramString())}
                                           -> ['this._xor(', xs.join(','), ')']                                          .join(''),
  And        transFn+:xs                   -> xs.join(';'),
  And                                      -> 'undefined',
  Opt        transFn:x                     -> ['this._opt(',           x, ')']                                           .join(''),
  Many       transFn:x                     -> ['this._many(',          x, ')']                                           .join(''),
  Many1      transFn:x                     -> ['this._many1(',         x, ')']                                           .join(''),
  Set        :n transFn:v                  -> ['$vars.', n, '=', v]                                                      .join(''),
  Not        transFn:x                     -> ['this._not(',           x, ')']                                           .join(''),
  Lookahead  transFn:x                     -> ['this._lookahead(',     x, ')']                                           .join(''),
  Form       transFn:x                     -> ['this._form(',          x, ')']                                           .join(''),
  ConsBy     transFn:x                     -> ['this._consumedBy(',    x, ')']                                           .join(''),
  IdxConsBy  transFn:x                     -> ['this._idxConsumedBy(', x, ')']                                           .join(''),
  JumpTable  { this._storeVar++; }
             jtCase*:cases
             { this._storeVar--; }         -> this.jumpTableCode(cases),
  Interleave intPart*:xs                   -> ['this._interleave(', xs.join(','), ')']                                   .join(''),

  Try { this._storeVar++; }
      transFn:x
      { this._storeVar--; }
      'Catch'
      { this._exceptionVar++; }
      ( transFn:y -> ['if($error', this._exceptionVar - 1, ' != fail) throw $error;', y].join('')
      | end       -> ['throw ', this._exceptionVar - 1].join('')                                  ):z
      { this._exceptionVar--; }            -> ['try{var $r', this._storeVar + 1, '=this._startStructure(-1);', x,
                                               ';this._appendStructure($r', this._storeVar,
                                               ',this._endStructure($r', this._storeVar + 1, '));',
                                               '}catch($error', this._exceptionVar, '){', z, ';}']                       .join(''),

  Function { this._storeVar++; }
           transFn:x
           { this._storeVar--; }           -> ['function(){', x, ';}']                                                   .join(''),
  FunctionStructure { this._storeVar++; }
           transFn+:xs
           { this._storeVar--; }           -> ['function(){var $r', this._storeVar + 1,
                                               '=this._startStructure(-1);', xs.join(';'),
                                               ';return this._endStructure($r', this._storeVar + 1, ');}']               .join(''),
  ReturnStructure transFn:x                -> ['$r', this._storeVar, '.value=', x]                                       .join(''),
  Return          transFn:x                -> ['return ', x]                                                             .join(''),
  Parenthesis     transFn:x                -> ['(', x, ')']                                                              .join(''),
  Store           transFn:x                -> ['this._appendStructure($r', this._storeVar, ',', x, ')']                  .join(''),
  Js              :locals transJs(locals),
  PopArg                                   -> 'this._getStructureValue(this.anything())',

  Rule       :name {this.rName = name;
                    this._storeVar = 0;
                    this._exceptionVar = 0; }
             :location !createSourceMapId():loc { addToSourseMap(loc, location.start.idx, location.stop.idx); }
             trans:body                    -> ['\n"', name, '":function(){var $elf=this,',
                                               '$vars={},',
                                               '$r0=this._startStructure(', loc, ');', body,
                                               ';return this._endStructure($r0);}']                                      .join(''),
  Grammar    :sName
             {this.sName = sName}
             trans*:rules                  -> ['objectThatDelegatesTo(', sName, ',{', rules.join(','), '})'].join(''),

  intPart  = [:mode transFn:part]          -> (mode.toProgramString()  + "," + part),
  jtCase   = [:x trans:e]                  -> [x.toProgramString(), e],

  transJs :locals = BSSemActionTranslator.jstrans(this._storeVar, locals),

  trans    = [:t apply(t):ans]             -> ans,
  transFn  = trans:x                       -> x
};
BSOMetaTranslator._callables = {
  anything: { name: "anything", nbArgs: 0, },
  apply:    { name: "_apply",   nbArgs: 1, },
  end:      { name: "end",      nbArgs: 0, },
  exactly:  { name: "exactly",  nbArgs: 1, },
  seq:      { name: "seq",      nbArgs: 1, },
};
BSOMetaTranslator._optimizedCall = function(rule, args) {
  let c = this._callables[rule];
  return c && c.nbArgs == args.length;
};
BSOMetaTranslator.jumpTableCode = function(cases) {
  var buf = new StringBuffer();
  buf.nextPutAll("(function(){var $r" + (this._storeVar + 1) + "=this._startStructure(-1);")
  buf.nextPutAll("switch(this._appendStructure($r" + (this._storeVar + 1) + ",this._apply('anything'))){");
  for (var i = 0; i < cases.length; i += 1)
    buf.nextPutAll("case " + cases[i][0] + ":" + cases[i][1] + ";break;");
  buf.nextPutAll("default: throw fail}return this._endStructure($r" + (this._storeVar + 1) + ");}).call(this)");
  return buf.contents();
};

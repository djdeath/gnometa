// TODO: turn off the "seq" inliner when G.seq !== OMeta.seq (will require some refactoring)
// TODO: add a factorizing optimization (will make jumptables more useful)

let mergeLocation = function(loc1, loc2) {
    return { start: Math.min(loc1.start, loc2.start),
             stop: Math.max(loc1.stop, loc2.stop) };
};

let BSNullOptimization = ometa {
  setHelped = !(this._didSomething = true),
  helped    = ?this._didSomething,

  pushLocation :loc = !(this._locations.push(loc)),
  popLocation = !(this._locations.pop()),

  trans     = [:loc :t ?(this[t] != undefined)
               pushLocation(loc)
               apply(t):ans
               popLocation]                -> [loc].concat(ans),
  optimize  = trans:x helped               -> x,

  App        :rule anything*:args          -> ['App',        rule].concat(args),
  Pred       :expr                         -> ['Pred',       expr],
  Or         trans*:xs                     -> ['Or',             ].concat(xs),
  XOr        trans*:xs                     -> ['XOr',            ].concat(xs),
  And        trans*:xs                     -> ['And',            ].concat(xs),
  Opt        trans:x                       -> ['Opt',        x   ],
  Many       trans:x                       -> ['Many',       x   ],
  Many1      trans:x                       -> ['Many1',      x   ],
  Set        :n trans:v                    -> ['Set',        n, v],
  Not        trans:x                       -> ['Not',        x   ],
  Lookahead  trans:x                       -> ['Lookahead',  x   ],
  Form       trans:x                       -> ['Form',       x   ],
  ConsBy     trans:x                       -> ['ConsBy',     x   ],
  IdxConsBy  trans:x                       -> ['IdxConsBy',  x   ],
  JumpTable  ([:c trans:e] -> [c, e])*:ces -> ['JumpTable'       ].concat(ces),
  Interleave ([:m trans:p] -> [m, p])*:xs  -> ['Interleave'      ].concat(xs),

  Js         :locals :code                 -> ['Js', locals, code],
  Location                                 -> ['Location'        ],
  PopArg                                   -> ['PopArg'          ],

  Rule       :name trans:body              -> ['Rule', name, body]
};
BSNullOptimization.initialize = function() {
  this._didSomething = false;
  this._locations = [];
};
BSNullOptimization.location = function() { return this._locations[this._locations.length - 1]; }

let BSAssociativeOptimization = ometa(BSNullOptimization) {
  And trans:x end           setHelped -> x.slice(1),
  And transInside('And'):xs           -> ['And'].concat(xs),
  Or  trans:x end           setHelped -> x.slice(1),
  Or  transInside('Or'):xs            -> ['Or'].concat(xs),
  XOr trans:x end           setHelped -> x.slice(1),
  XOr transInside('XOr'):xs           -> ['XOr'].concat(xs),

  transInside :t = [:l exactly(t) transInside(t):xs] transInside(t):ys setHelped -> xs.concat(ys)
                 | trans:x                           transInside(t):xs           -> [x].concat(xs)
                 |                                                               -> []
};

let BSSeqInliner = ometa(BSNullOptimization) {
  App        = 'seq'
               [:l 'Js' :locals ['string' :s]] end
               seqString(s):cs setHelped              -> ['And'].concat(cs).concat([jsValue('string', s)])
             | :rule anything*:args                   -> ['App', rule].concat(args),
  inlineChar = BSOMetaParser.eChar:c                  -> [null, 'App', 'exactly', jsValue('string', c)],
  seqString = &(:s ?(typeof s === 'string'))
              [ inlineChar*:cs ]                      -> cs

};

let JumpTable = function(choiceOp, choice) {
  this.choiceOp = choiceOp;
  this.choices = {};
  this.add(choice);
};
JumpTable.prototype.add = function(choice) {
  var c = choice[0], t = choice[1];
  if (this.choices[c]) {
    if (this.choices[c][0] == this.choiceOp)
      this.choices[c].push(t);
    else
      this.choices[c] = [this.choiceOp, this.choices[c], t];
  }
  else
    this.choices[c] = t;
};
JumpTable.prototype.toTree = function() {
  var r = ['JumpTable'], choiceKeys = ownPropertyNames(this.choices);
  for (var i = 0; i < choiceKeys.length; i += 1)
    r.push([choiceKeys[i], this.choices[choiceKeys[i]]]);
  return r;
};
let BSJumpTableOptimization = ometa(BSNullOptimization) {
  Or  (jtChoices('Or')  | trans)*:cs -> ['Or'].concat(cs),
  XOr (jtChoices('XOr') | trans)*:cs -> ['XOr'].concat(cs),
  quotedString  = [:l 'Js' ['string' :s ]] -> s,
  jtChoice      = [:l 'And' [:l1 'App' 'exactly' quotedString:x] anything*:rest]           -> [x, [l, 'And'].concat(rest)]
    |                       [:l1 'App' 'exactly' quotedString:x]                           -> [x, jsValue('string', x)],
  jtChoices :op = jtChoice:c {new JumpTable(op, c)}:jt (jtChoice:c {jt.add(c)})* setHelped -> jt.toTree()
};

let BSFunctionOptimization = ometa(GenericMatcher) {
  optimize = trans:x -> x,

  pushLocation :loc = !(this._locations.push(loc)),
  popLocation = !(this._locations.pop()),

  trans = [:loc :t ?(this[t] != undefined)
           pushLocation(loc)
           apply(t):ans
           popLocation] -> [loc].concat(ans),

  andReturn :l = notLast(#storeSomething)*:xs
                 somethingThatReturns:y                           -> [l, 'And'].concat(xs.concat([y])),

  somethingThatReturns = [ :l exactly(#And) andReturn(l):ans ]    -> ans
                       | [ :l exactly(#And) end ]                 -> [null, 'ReturnStructure', [l, 'And']]
                       | [ :l generatesStructure:t apply(t):ans ] -> [null, 'ReturnStructure', [l, 'Store', [l].concat(ans)]]
                       | [ :l exactly(#Set) apply(#Set):ans ]     -> [null, 'ReturnStructure', [l, 'Parenthesis', [l].concat(ans)]]
                       | trans:x                                  -> [null, 'ReturnStructure', x],

  generatesStructure = #Or | #XOr | #Opt | #Many | #Many1 | #Not
                     | #Lookahead | #Form | #ConsBy | #IdxConsBy
                     | #App | #JumpTable | #Interleave,

  somethingThatCanPass      = [ :loc generatesStructure:t
                                ?(this[t] != undefined)
                                pushLocation(loc)
                                apply(t):ans
                                popLocation ]             -> [loc].concat(ans),

  storeSomething            = [ :loc generatesStructure:t
                                ?(this[t] != undefined)
                                pushLocation(loc)
                                apply(t):ans
                                popLocation ]             -> [loc, 'Store', [loc].concat(ans)]
                            | trans:x,

  functioned = somethingThatCanPass:x                     -> [x[0], 'Function', [null, 'Return', x]]
             | somethingThatReturns:x                     -> [x[0], 'FunctionStructure', x],

  Or         functioned*:xs                               -> ['Or'             ].concat(xs),
  XOr        functioned*:xs                               -> ['XOr'            ].concat(xs),
  Opt        functioned:x                                 -> ['Opt',       x   ],
  Many       functioned:x                                 -> ['Many',      x   ],
  Many1      functioned:x                                 -> ['Many1',     x   ],
  Not        functioned:x                                 -> ['Not',       x   ],
  Lookahead  functioned:x                                 -> ['Lookahead', x   ],
  Form       functioned:x                                 -> ['Form',      x   ],
  ConsBy     functioned:x                                 -> ['ConsBy',    x   ],
  IdxConsBy  functioned:x                                 -> ['IdxConsBy', x   ],
  App        :rule trans*:args                            -> ['App',       rule].concat(args),
  JumpTable  ([:c somethingThatReturns:e] -> [c, e])*:ces -> ['JumpTable'      ].concat(ces),
  Interleave ([:m functioned:p] -> [m, p])*:xs            -> ['Interleave'     ].concat(xs),

  // Do not generate structure :
  Pred       :expr                                        -> ['Pred', expr],
  Set        :n storeSomething:v                          -> ['Set', n, v],

  Js         :locals :code                                -> ['Js', locals, code],
  Location                                                -> ['Location'],
  PopArg                                                  -> ['PopArg'],

  Rule       :name
             ( somethingThatCanPass:b
               -> [null, 'ReturnStructure',
                   [b[0], 'Store', b]]
             | somethingThatReturns ):body                -> ['Rule', name, body]
};
BSFunctionOptimization.initialize = function() { this._locations = []; };
BSFunctionOptimization.location = function() { return this._locations[this._locations.length - 1]; }

let BSOMetaOptimizer = ometa {
  optimizeGrammar = ['Grammar' :sn optimizeRule*:rs]          -> ['Grammar', sn].concat(rs),
  optimizeRule    = :r
                       ( BSSeqInliner.optimize(r):r
                       | empty )

                       ( BSAssociativeOptimization.optimize(r):r
                       | BSJumpTableOptimization.optimize(r):r )*

                       BSFunctionOptimization.optimize(r):r
    -> r
};
